"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeBase64 = exports.parseSAMLRequest = exports.request = void 0;
const util_1 = require("util");
const xml2js_1 = __importDefault(require("xml2js"));
const zlib_1 = require("zlib");
const xmlbuilder_1 = __importDefault(require("xmlbuilder"));
const crypto_1 = __importDefault(require("crypto"));
const sign_1 = require("./sign");
const inflateRawAsync = (0, util_1.promisify)(zlib_1.inflateRaw);
const idPrefix = '_';
const authnXPath = '/*[local-name(.)="AuthnRequest" and namespace-uri(.)="urn:oasis:names:tc:SAML:2.0:protocol"]';
const request = ({ ssoUrl, entityID, callbackUrl, isPassive = false, forceAuthn = false, identifierFormat = 'urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress', providerName = 'BoxyHQ', signingKey, publicKey, }) => {
    const id = idPrefix + crypto_1.default.randomBytes(10).toString('hex');
    const date = new Date().toISOString();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const samlReq = {
        'samlp:AuthnRequest': {
            '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
            '@ID': id,
            '@Version': '2.0',
            '@IssueInstant': date,
            '@ProtocolBinding': 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
            '@Destination': ssoUrl,
            'saml:Issuer': {
                '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',
                '#text': entityID,
            },
        },
    };
    if (isPassive)
        samlReq['samlp:AuthnRequest']['@IsPassive'] = true;
    if (forceAuthn) {
        samlReq['samlp:AuthnRequest']['@ForceAuthn'] = true;
    }
    samlReq['samlp:AuthnRequest']['@AssertionConsumerServiceURL'] = callbackUrl;
    samlReq['samlp:AuthnRequest']['samlp:NameIDPolicy'] = {
        '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
        '@Format': identifierFormat,
        '@AllowCreate': 'true',
    };
    if (providerName != null) {
        samlReq['samlp:AuthnRequest']['@ProviderName'] = providerName;
    }
    let xml = xmlbuilder_1.default.create(samlReq).end({});
    if (signingKey) {
        xml = (0, sign_1.sign)(xml, signingKey, publicKey, authnXPath);
    }
    return {
        id,
        request: xml,
    };
};
exports.request = request;
// Parse XML
const parseXML = (xml) => {
    return new Promise((resolve, reject) => {
        xml2js_1.default.parseString(xml, {
            tagNameProcessors: [xml2js_1.default.processors.stripPrefix],
            strict: true,
        }, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        });
    });
};
// Decode the base64 string
const decodeBase64 = (string, isDeflated) => __awaiter(void 0, void 0, void 0, function* () {
    return isDeflated
        ? (yield inflateRawAsync(Buffer.from(string, 'base64'))).toString()
        : Buffer.from(string, 'base64').toString();
});
exports.decodeBase64 = decodeBase64;
// Parse SAMLRequest attributes
const parseSAMLRequest = (rawRequest_1, ...args_1) => __awaiter(void 0, [rawRequest_1, ...args_1], void 0, function* (rawRequest, isPost = true) {
    var _a;
    const result = yield parseXML(rawRequest);
    const attributes = result['AuthnRequest']['$'];
    const issuer = result['AuthnRequest']['Issuer'];
    const publicKey = result['AuthnRequest']['Signature']
        ? result['AuthnRequest']['Signature'][0]['KeyInfo'][0]['X509Data'][0]['X509Certificate'][0]
        : null;
    if (!issuer) {
        throw new Error("Missing 'Issuer' in SAML Request.");
    }
    if (!publicKey && isPost) {
        throw new Error('Missing signature');
    }
    return {
        id: attributes.ID,
        acsUrl: attributes.AssertionConsumerServiceURL,
        providerName: attributes.ProviderName,
        audience: (_a = issuer[0]['_']) !== null && _a !== void 0 ? _a : issuer[0], // also known as entityID
        publicKey,
    };
});
exports.parseSAMLRequest = parseSAMLRequest;
