"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogoutRequest = exports.parseLogoutResponse = void 0;
const crypto_1 = __importDefault(require("crypto"));
const xml2js_1 = __importDefault(require("xml2js"));
const xmlbuilder_1 = __importDefault(require("xmlbuilder"));
const parseLogoutResponse = (rawResponse) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        xml2js_1.default.parseString(rawResponse, { tagNameProcessors: [xml2js_1.default.processors.stripPrefix] }, (err, { LogoutResponse }) => {
            if (err) {
                reject(err);
                return;
            }
            resolve({
                issuer: LogoutResponse.Issuer[0]._,
                id: LogoutResponse.$.ID,
                status: LogoutResponse.Status[0].StatusCode[0].$.Value,
                destination: LogoutResponse.$.Destination,
                inResponseTo: LogoutResponse.$.InResponseTo,
            });
        });
    });
});
exports.parseLogoutResponse = parseLogoutResponse;
const createLogoutRequest = ({ nameId, providerName, sloUrl, }) => {
    const id = '_' + crypto_1.default.randomBytes(10).toString('hex');
    const xml = {
        'samlp:LogoutRequest': {
            '@xmlns:samlp': 'urn:oasis:names:tc:SAML:2.0:protocol',
            '@xmlns:saml': 'urn:oasis:names:tc:SAML:2.0:assertion',
            '@ID': id,
            '@Version': '2.0',
            '@IssueInstant': new Date().toISOString(),
            '@Destination': sloUrl,
            'saml:Issuer': {
                '#text': providerName,
            },
            'saml:NameID': {
                '@Format': 'urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified',
                '#text': nameId,
            },
        },
    };
    return {
        id,
        xml: xmlbuilder_1.default.create(xml).end({}),
    };
};
exports.createLogoutRequest = createLogoutRequest;
