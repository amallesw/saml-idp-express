"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptXml = void 0;
const xpath_1 = require("xpath");
const xmlenc = __importStar(require("xml-encryption"));
const utils_1 = require("./utils");
const assertion = (xml, encryptedAssertions, options) => {
    if (!Array.isArray(encryptedAssertions)) {
        throw new Error('Undefined Encrypted Assertion.');
    }
    if (encryptedAssertions.length !== 1) {
        throw new Error('Multiple Assertion.');
    }
    return xmlenc.decrypt(encryptedAssertions[0], { key: options.privateKey }, (err, res) => {
        if (err) {
            throw new Error('Exception of Assertion Decryption.');
        }
        if (!res) {
            throw new Error('Undefined Encryption Assertion.');
        }
        const assertionNode = (0, utils_1.parseFromString)(res);
        xml.documentElement.removeChild(encryptedAssertions[0]);
        xml.documentElement.appendChild(assertionNode);
        return { assertion: xml.toString(), decrypted: true };
    });
};
const decryptXml = (entireXML, options) => {
    if (!entireXML) {
        throw new Error('Undefined Assertion.');
    }
    const xml = (0, utils_1.parseFromString)(entireXML);
    const encryptedAssertions = (0, xpath_1.select)("/*[contains(local-name(), 'Response')]/*[local-name(.)='EncryptedAssertion']", xml);
    if (encryptedAssertions.length >= 1) {
        return assertion(xml, encryptedAssertions, options);
    }
    return { assertion: entireXML, decrypted: false };
};
exports.decryptXml = decryptXml;
